- content_for :use_full_container, true

- blank_value = lambda { |_,v| v.blank? }

- content_for :tags do
  %h5 Tags
  - if @wallpapers.facets.any?
    %ul.list-facet.list-facet-tags
      - # OPTIMIZE
      - terms_to_count = Hash[@wallpapers.facets['tags']['terms'].map { |t| [t['term'], t['count']] }]
      - tags = search_options[:tags] || []
      - exclude_tags = search_options[:exclude_tags] || []
      - search_options[:page] = nil # Temporary fix
      - rendered_terms = []
      - [tags, exclude_tags, @wallpapers.facets['tags']['terms']].flatten.each do |facet_or_term|
        - term = facet_or_term.try(:[], 'term') || facet_or_term
        - next if rendered_terms.include? term
        - rendered_terms << term
        %li
          .btn-group
            = link_to tag_path(term.parameterize), class: 'btn btn-xs btn-default' do
              %span.glyphicon.glyphicon-tag
            - if search_options[:exclude_tags].try(:include?, term)
              = link_to url_for(search_options.merge(exclude_tags: (exclude_tags - [term]), tags: (tags - [term])).reject(&blank_value)), class: 'btn btn-xs btn-danger' do
                %span.glyphicon.glyphicon-remove
            - else
              = link_to url_for(search_options.merge(exclude_tags: (exclude_tags + [term]), tags: (tags - [term])).reject(&blank_value)), class: 'btn btn-xs btn-default' do
                %span.glyphicon.glyphicon-remove
            - if search_options[:tags].try(:include?, term)
              = link_to url_for(search_options.merge(tags: (tags - [term]), exclude_tags: (exclude_tags - [term])).reject(&blank_value)), class: 'btn btn-xs btn-success' do
                = term
                %small (#{terms_to_count[term] || 0})
            - else
              = link_to url_for(search_options.merge(tags: (tags + [term]), exclude_tags: (exclude_tags - [term])).reject(&blank_value)), class: 'btn btn-xs btn-link' do
                = term
                %small (#{terms_to_count[term] || 0})


- content_for :purity do
  %h5 Purity
  %ul.list-facet
    - {'sfw' => 'SFW', 'sketchy' => 'Sketchy', 'nsfw' => 'NSFW'}.each do |value, label|
      - active = (search_options[:purity].blank? && value == 'sfw') || search_options[:purity].include?(value)
      %li
        - if active
          = link_to label, url_for(search_options.merge(purity: (search_options[:purity] - [value])).reject(&blank_value)),
                    class: "btn btn-sm btn-block btn-#{value} btn-active"
        - else
          = link_to label, url_for(search_options.merge(purity: (search_options[:purity] + [value])).reject(&blank_value)),
                    class: "btn btn-sm btn-block btn-#{value}"

- content_for :colors do
  %h5 Colors
  %ul.list-inline.list-color
    - colors = search_options[:colors] || []
    - Colorscore::Palette::DEFAULT.each do |hex|
      - if colors.include?(hex)
        %li.active
          = link_to '', url_for(search_options.merge(colors: (colors - [hex])).reject(&blank_value)), style: "background-color: \##{hex}"
      - else
        %li
          = link_to '', url_for(search_options.merge(colors: (colors + [hex])).reject(&blank_value)), style: "background-color: \##{hex}"

- content_for :screen_resolutions do
  .list-facet
    - last_screen_resolution_category = nil
    - ScreenResolution.group_by_category_for_index.each do |category, screen_resolutions|
      %h5= category
      - screen_resolutions.each do |screen_resolution|
        - active = [screen_resolution[:width].to_s, screen_resolution[:height].to_s] == [search_options[:width], search_options[:height]]
        - css_class = active ? 'success' : 'link'
        - if active
          = link_to url_for(search_options.merge(width: nil, height: nil).reject(&blank_value)), class: "btn btn-xs btn-#{css_class}" do
            #{screen_resolution[:width]}&times;#{screen_resolution[:height]}
        - else
          = link_to url_for(search_options.merge(width: screen_resolution[:width], height: screen_resolution[:height]).reject(&blank_value)), class: "btn btn-xs btn-#{css_class}" do
            #{screen_resolution[:width]}&times;#{screen_resolution[:height]}

- content_for :sort_by do
  %h5 Sort By
  %ul.list-facet
    - {'latest' => 'Latest', 'popular' => 'Popular', 'random' => 'Random'}.each do |value, label|
      - if search_options[:order] == value
        %li.active
          = link_to url_for(search_options.merge(order: nil).reject(&blank_value)), class: "btn btn-sm btn-block btn-primary" do
            = label
      - else
        %li
          = link_to url_for(search_options.merge(order: value).reject(&blank_value)), class: "btn btn-sm btn-block" do
            = label

- content_for :query_string do
  .row
    .col-lg-8
      %h5 Query string
      = form_tag url_for, method: :get do
        - search_options.reject(&blank_value).each do |k, v|
          = hidden_field_tag k, v
        .input-group
          = text_field_tag :q, search_options[:q], class: 'form-control input-md', placeholder: 'e.g. width:>1920 height:>1080'
          .input-group-btn
            = submit_tag 'Search', class: 'btn btn-default btn-md'
    .col-lg-4
      %h5 Settings
      .btn-group
        = link_to 'Save settings', save_search_params_wallpapers_path, class: 'btn btn-md btn-info', data: { action: 'save_settings', method: :post, remote: true, type: :json, params: search_options, disable_with: 'Saving&hellip;' }
        %button{:type => 'button', :class => 'btn btn-md btn-info dropdown-toggle', :data => {:toggle => 'dropdown'}}
          %span.caret
        %ul.dropdown-menu
          %li= link_to 'Clear settings', save_search_params_wallpapers_path, data: { action: 'save_settings', method: :post, remote: true, type: :json, disable_with: 'Clearing&hellip;' }

.well
  .row
    .col-lg-5= yield :tags
    .col-lg-7
      .row
        .col-lg-2
          = yield :sort_by
          = yield :purity if user_signed_in?

        .col-lg-2
          = yield :colors
        .col-lg-8
          = yield :screen_resolutions
          = yield :query_string

= render partial: 'list', locals: { wallpapers: @wallpapers }