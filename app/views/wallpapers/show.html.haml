- title       ["\##{@wallpaper.id}", @wallpaper.tag_list_text].reject(&:blank?)
- description @wallpaper.tag_list_text
- keywords    @wallpaper.tag_list_text

- content_for :wallpaper_sidebar_content do
  .panel.panel-transparent
    - if @wallpaper.user.present?
      .panel-body
        .media.media-user
          = link_to @wallpaper.user, class: 'pull-left' do
            = image_tag user_avatar_url(@wallpaper.user, 30), alt: @wallpaper.user.username, class: 'media-object'
          .media-body
            %h3.media-heading= link_to_user @wallpaper.user

    .panel-body
      %ul.list-inline
        %li
          %span.glyphicon.glyphicon-calendar
          = time_tag @wallpaper.created_at, @wallpaper.created_at.to_date.to_formatted_s(:long), title: @wallpaper.created_at
        %li
          %span.glyphicon.glyphicon-eye-open
          = @wallpaper.impressions_count
        %li
          %span.glyphicon.glyphicon-star
          %span.fav-count= @wallpaper.favourites_count
      %ul.list-inline
        %li
          %span.glyphicon.glyphicon-picture
          = @wallpaper.resolution
        %li{:class => "purity-#{@wallpaper.purity}"}
          %span.glyphicon.glyphicon-flag
          = @wallpaper.purity_text
      - if @wallpaper.source.present?
        %ul.list-inline
          %li
            %span.glyphicon.glyphicon-question-sign
            = @wallpaper.cooked_source

    - unless @wallpaper.approved?
      .panel-body
        .alert.alert-danger
          Wallpaper is pending moderator approval.

    - if user_signed_in?
      .panel-body
        .btn-group.btn-group-justified
          - if user_signed_in? && current_user.favourited?(@wallpaper.object)
            %a{:class => 'btn btn-favourite favourited', :data => {:remote => true, :method => :post, :url => toggle_favourite_wallpaper_path(@wallpaper)}}
              %span.glyphicon.glyphicon-star
              Faved
          - else
            %a{:class => 'btn btn-favourite favourite', :data => {:remote => true, :method => :post, :url => toggle_favourite_wallpaper_path(@wallpaper)}}
              %span.glyphicon.glyphicon-star-empty
              Fav
          %a{:class => 'btn btn-collect', :data => {:remote => true, :url => collections_wallpaper_path(@wallpaper)}} 
            %span.glyphicon.glyphicon-folder-close
            Collect
          .btn-group
            %a{:class => 'btn btn-default dropdown-toggle', :data => {:toggle => 'dropdown'}} 
              %span.glyphicon.glyphicon-list
            %ul.dropdown-menu.pull-right{:role => 'menu'}
              - if user_signed_in?
                - if @wallpaper.sfw?
                  %li
                    = link_to set_profile_cover_wallpaper_path(@wallpaper), data: { method: :post, confirm: 'Are you sure?' } do
                      %span.glyphicon.glyphicon-picture
                      Set as profile cover
                - if can? :update, @wallpaper
                  %li
                    = link_to edit_wallpaper_path(@wallpaper) do
                      %span.glyphicon.glyphicon-pencil
                      Edit metadata
                - if can? :update, @wallpaper
                  %li
                    = link_to history_wallpaper_path(@wallpaper) do
                      %span.glyphicon.glyphicon-list-alt
                      View edit history
                - if can? :destroy, @wallpaper
                  %li
                    = link_to @wallpaper, data: { method: :delete, confirm: 'Are you sure?' } do
                      %span.glyphicon.glyphicon-remove
                      Delete wallpaper
                %li
                  = link_to new_wallpaper_report_path(@wallpaper) do
                    %span.glyphicon.glyphicon-flag
                    Report
                - if current_user.admin?
                  %li
                    = link_to admin_wallpaper_path(@wallpaper) do
                      %span.glyphicon.glyphicon-fire
                      Administer

    - if false
      - cache ['show', @wallpaper, 'color_list'] do
        - if @wallpaper.wallpaper_colors.any?
          .panel-body.text-center
            %ul.list-color
              - @wallpaper.wallpaper_colors.includes(:color).each do |color|
                %li= link_to '', wallpapers_path(search_params.merge(colors: [color.hex])), style: "background-color: \##{color.hex}"

    - if false
      .panel-body
        = @wallpaper.resolution_select_tag

    - if false
      .panel-body
        .btn-group.btn-group-justified.btn-group-purity
          - Wallpaper.purity.options.each_entry do |label, value|
            = link_to label, update_purity_wallpaper_path(@wallpaper, value),
                      class: "btn btn-sm ladda-button btn-#{value} #{'btn-active' if @wallpaper.purity == value} #{'disabled' if @wallpaper.purity_locked?}",
                      data: { :method => :patch,
                              :remote => true,
                              :type => 'json',
                              :style => 'zoom-in',
                              :'action' => 'change-purity',
                              :'wallpaper-id' => @wallpaper.id,
                              :purity => value }

    - if user_signed_in?
      .panel-body
        = simple_form_for :comment, url: wallpaper_comments_path(@wallpaper), remote: true, data: { provide: 'comments' } do |f|
          .row
            .col-sm-2
              = image_tag user_avatar_url(current_user, 30), alt: current_user.username, class: 'media-object'
            .col-sm-10
              = f.input :comment, as: :text, label: false, placeholder: 'Your comment', input_html: { data: { focus_placeholder: 'Shift+Enter for newline. Enter to post.' } }
      - comments = @wallpaper.comments.includes(:user).recent
      .panel-body.container-comments{:class => ('hide' if comments.empty?)}
        %ul.list-unstyled.list-comment= render partial: 'comments/wallpaper_comment', collection: comments.limit(4), as: :comment
        - if comments.size > 4
          = link_to 'Load all comments', wallpaper_comments_path(@wallpaper), class: 'btn btn-block', remote: true, data: { action: 'load-comments' }


    - cache ['wallpapers', 'show', @wallpaper, 'tag_list'] do
      - if @wallpaper.ordered_tags.any?
        .panel-body
          %ul.list-unstyled
            - @wallpaper.ordered_tags.each do |tag|
              %li
                .btn-group
                  = link_to tag, class: "btn btn-xs btn-default purity-#{tag.purity}" do
                    %span.glyphicon.glyphicon-tag
                  = link_to tag.name, wallpapers_path(tags: [tag.name]), class: "btn btn-xs btn-link purity-#{tag.purity}"

- content_for :wallpaper_stage_content do
  = image_tag @wallpaper.requested_image_url, width: @wallpaper.requested_image_width, height: @wallpaper.requested_image_height, class: "img-wallpaper img-#{@wallpaper.format} state-1"

- # OPTIMIZE
- content_for :javascript_for_page do
  :javascript
    $(function() {
      var $wallpaperShowContainer = $('.wallpaper-show-container');
      var $commentForm = $('form.comment');
      var $commentTextarea = $commentForm.find('textarea#comment_comment');
      var hideSidebarPreference = $.cookie('wallpaper_show:hide_sidebar');
      if (hideSidebarPreference) {
        $wallpaperShowContainer.removeClass('has-sidebar');
      }
      $('.toggle-sidebar-btn').click(function() {
        $wallpaperShowContainer.toggleClass('has-sidebar');
        if ($wallpaperShowContainer.is('.has-sidebar')) {
          $.removeCookie('wallpaper_show:hide_sidebar');
        } else {
          $.cookie('wallpaper_show:hide_sidebar', true);
        }
      });
      $('.list-comment').on('click', '.reply-comment', function(e) {
        e.preventDefault();
        var $this = $(this);
        var replyToUsername = $this.closest('[data-username]').data('username');
        $commentTextarea.focus();
        $commentTextarea.val($commentTextarea.val() + '@' + replyToUsername + ' ');
      });
      $commentForm.on('ajax:beforeSend', function() {
        $commentTextarea.prop('disabled', true);
      })
      $commentForm.on('ajax:success', function() {
        $commentTextarea.val('');
      });
      $commentForm.on('ajax:complete', function() {
        $commentTextarea.prop('disabled', false);
      });
      $commentTextarea.data('original-placeholder', $commentTextarea.attr('placeholder'));
      $commentTextarea.focusin(function() {
        $commentTextarea.attr('placeholder', $commentTextarea.data('focus-placeholder'));
      });
      $commentTextarea.focusout(function() {
        $commentTextarea.attr('placeholder', $commentTextarea.data('original-placeholder'));
      });
      $commentTextarea.keydown(function(e) {
        if (e.keyCode == 13 && ! e.shiftKey) {
          e.preventDefault();
          $commentForm.submit();
        }
      });
    });
